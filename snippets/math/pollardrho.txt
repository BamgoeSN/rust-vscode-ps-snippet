use millerrabin::Primality;

/// Reference: https://github.com/justiceHui/icpc-teamnote/blob/master/code/Math/MillerRabin-PollardRho.cpp
fn factorize(mut n: u64, rng: &mut RNG) -> Vec<u64> {
	if n <= 1 {
		return vec![];
	}
	let mut ret = vec![];
	while n % 2 == 0 {
		n /= 2;
		ret.push(2);
	}
	if n.is_prime() {
		ret.push(n);
		return ret;
	}
	if n == 1 {
		return ret;
	}
	rho(n, rng, &mut ret);
	ret
}

fn rho(n: u64, rng: &mut RNG, ret: &mut Vec<u64>) {
	let mulmod = |x: u64, y: u64, c: u64| ((x as u128 * y as u128) % c as u128) as u64;
	loop {
		let mut tort = rng.gen_range(2..n);
		let mut hare = tort;
		let c = rng.gen_range(1..n);
		let step = |x: u64| (mulmod(x, x, n) + c) % n;
		loop {
			tort = step(tort);
			hare = step(step(hare));
			let d = gcd(tort.abs_diff(hare), n);

			if d == 1 {
				continue;
			} else if d == n {
				break;
			}

			let a = n / d;
			if a.is_prime() {
				ret.push(a);
			} else {
				rho(a, rng, ret);
			}
			if d.is_prime() {
				ret.push(d);
			} else {
				rho(d, rng, ret);
			}
			return;
		}
	}
}