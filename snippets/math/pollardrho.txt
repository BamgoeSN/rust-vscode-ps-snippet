mod factorization {
    use super::millerrabin::Primality;
    use std::ops::*;

    pub trait PollardRho: Primality + From<u8> + PartialOrd + ShrAssign + BitAnd<Output = Self> + Clone {
        fn rho(self, arr: &mut Vec<Self>, rng: &mut rng::RNG);
        fn factorize(mut self, rng: &mut rng::RNG) -> Vec<Self> {
            let mut arr: Vec<Self> = Vec::new();
            if self <= 1.into() {
                return arr;
            }
            while self.clone() & 1.into() == 0.into() {
                self >>= 1.into();
                arr.push(2.into());
            }
            self.rho(&mut arr, rng);
            arr
        }
    }

    macro_rules! impl_pollardrho {
        ($t:ty, $u:ty, $reset:expr) => {
            impl PollardRho for $t {
                fn rho(self, arr: &mut Vec<Self>, rng: &mut rng::RNG) {
                    if self <= 1 {
                        return;
                    } else if self.is_prime() {
                        arr.push(self);
                        return;
                    }

                    let mut i: u64 = 0;
                    let mut x: $t = (rng.next_u64() % self as u64) as $t;
                    let mut y: $t = x;
                    let mut k: u64 = 2;
                    let mut d: $t;
                    let mut reset_limit: u64 = $reset;

                    loop {
                        i += 1;
                        x = (((x as $u * x as $u % self as $u) + (self - 1) as $u) % self as $u) as $t;
                        d = gcd(y.abs_diff(x), self);
                        if d == self || i >= reset_limit {
                            // Reset
                            reset_limit = reset_limit * 3 / 2;
                            i = 0;
                            x = (rng.next_u64() % self as u64) as $t;
                            y = x;
                        }
                        if d != 1 {
                            break;
                        }
                        if i == k {
                            y = x;
                            k <<= 1;
                        }
                    }

                    if d != self {
                        d.rho(arr, rng);
                        (self / d).rho(arr, rng);
                        return;
                    }

                    let mut i = 3;
                    while i * i <= self {
                        if self % i == 0 {
                            i.rho(arr, rng);
                            (d / i).rho(arr, rng);
                            return;
                        }
                        i += 2;
                    }
                }
            }
        };
    }

    impl_pollardrho!(u8, u16, 100000);
    impl_pollardrho!(u16, u32, 100000);
    impl_pollardrho!(u32, u64, 100000);
    impl_pollardrho!(u64, u128, 100000);

    pub fn gcd<T>(x: T, y: T) -> T
    where
        T: Copy + PartialEq + PartialOrd + core::ops::Rem<Output = T> + From<u8>,
    {
        if y == 0.into() {
            x
        } else {
            let v = x % y;
            gcd(y, v)
        }
    }

    pub mod rng {
        pub struct RNG {
            val: u64,
        }
        impl RNG {
            pub fn new(seed: u64) -> Self {
                Self { val: seed }
            }
            pub fn next_u64(&mut self) -> u64 {
                let mut x = self.val;
                x ^= x << 13;
                x ^= x >> 7;
                x ^= x << 17;
                self.val = x;
                x
            }
        }
    }

    pub use self::rng::*;
}