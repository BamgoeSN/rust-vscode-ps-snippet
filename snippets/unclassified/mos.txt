/// max_n: maximum number of l and r
/// queries: Vec<(id, l, r)>
fn mos_sort(max_n: usize, queries: &[(usize, usize, usize)]) -> Vec<(usize, usize, usize)> {
	let n_bit = max_n.next_power_of_two().trailing_zeros();
	let mut arr: Vec<(u64, (u32, u32, u32))> = queries.iter().map(|&(a, b, c)| (0, (a as u32, b as u32, c as u32))).collect();
	for q in arr.iter_mut() {
		q.0 = hilbert_order(q.1 .1, q.1 .2, n_bit, 0);
	}
	arr.sort_unstable_by_key(|q| q.0);
	arr.into_iter().map(|(_, (a, b, c))| (a as usize, b as usize, c as usize)).collect()
}

#[inline(always)]
fn hilbert_order(x: u32, y: u32, pow: u32, rotate: u32) -> u64 {
	if pow == 0 {
		return 0;
	}
	let hpow: u32 = 1 << (pow - 1);
	let mut seg: u32 = if x < hpow {
		if y < hpow {
			0
		} else {
			3
		}
	} else {
		if y < hpow {
			1
		} else {
			2
		}
	};
	seg = (seg + rotate) & 3;

	let (nx, ny) = (x & (x ^ hpow), y & (y ^ hpow));
	let nrot = rotate + ROTATE_DELTA[seg as usize] & 3;
	let sub_square_size = 1u64 << (2 * pow - 2);
	let ans = seg as u64 * sub_square_size;
	let add = hilbert_order(nx, ny, pow - 1, nrot);
	if seg == 1 || seg == 2 {
		ans + add
	} else {
		ans + sub_square_size - add - 1
	}
}

const ROTATE_DELTA: [u32; 4] = [3, 0, 0, 1];
