struct Fenwick<T> {
	n: usize,
	data: Vec<T>,
}

impl<T: Copy + From<i8> + std::ops::AddAssign + std::ops::Sub<Output = T>> Fenwick<T> {
	fn new(n: usize) -> Self {
		Self { n, data: vec![0.into(); n] }
	}

	fn add(&mut self, idx: usize, val: T) {
		let mut idx = idx + 1;
		while idx <= self.n {
			self.data[idx - 1] += val;
			idx += idx & (!idx + 1);
		}
	}

	fn get(&self, idx: usize) -> T {
		self.sum(idx..=idx)
	}

	fn sum(&self, range: impl std::ops::RangeBounds<usize>) -> T {
		use std::ops::Bound::*;
		let l = match range.start_bound() {
			Included(&v) => v,
			Excluded(&v) => v + 1,
			Unbounded => 0,
		};
		let r = match range.end_bound() {
			Included(&v) => v + 1,
			Excluded(&v) => v,
			Unbounded => self.n,
		};
		self.inner_sum(r) - self.inner_sum(l)
	}

	fn inner_sum(&self, mut r: usize) -> T {
		let mut s: T = 0.into();
		while r > 0 {
			s += self.data[r - 1];
			r -= r & (!r + 1);
		}
		s
	}
}
