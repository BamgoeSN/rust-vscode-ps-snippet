/// Returns a convex hull of a set of 2D points `arr` in CCW order.
/// Set `COLLINEAR` to `true` to include, or `false` to exclude, collinear edge points.
fn convex_hull<const COLLINEAR: bool>(arr: &[P]) -> Vec<P> {
	let mut arr = arr.to_vec();
	arr.sort_unstable();
	arr.dedup();
	if arr.len() <= 1 {
		return arr.clone();
	}
	let mut ret = vec![];

	fn monotone<const COLLINEAR: bool>(it: impl Iterator<Item = P>) -> Vec<P> {
		let mut dl = vec![];
		for p in it {
			while dl.len() >= 2 {
				let n = dl.len();
				let v = ccw(dl[n - 2], dl[n - 1], p);
				if v < 0 || (!COLLINEAR && v == 0) {
					dl.pop();
				} else {
					break;
				}
			}
			dl.push(p);
		}
		dl
	}

	ret.extend(monotone::<COLLINEAR>(arr.iter().copied()));
	ret.pop();
	ret.extend(monotone::<COLLINEAR>(arr.iter().copied().rev()));
	ret.pop();

	ret
}